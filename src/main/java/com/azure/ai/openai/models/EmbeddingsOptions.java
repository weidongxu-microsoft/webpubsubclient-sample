// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.openai.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Schema to create a prompt completion from a deployment. */
@Fluent
public final class EmbeddingsOptions {
    /*
     * The ID of the end-user, for use in tracking and rate-limiting.
     */
    @JsonProperty(value = "user")
    private String user;

    /*
     * input type of embedding search to use
     */
    @JsonProperty(value = "input_type")
    private String inputType;

    /*
     * ID of the model to use
     */
    @JsonProperty(value = "model")
    private String model;

    /*
     * Input text to get embeddings for, encoded as a string.
     * To get embeddings for multiple inputs in a single request, pass an array of strings.
     * Each input must not exceed 2048 tokens in length.
     *
     * Unless you are embedding code, we suggest replacing newlines (\n) in your input with a single space,
     * as we have observed inferior results when newlines are present.
     */
    @JsonProperty(value = "input", required = true)
    private InputModelBase input;

    /**
     * Creates an instance of EmbeddingsOptions class.
     *
     * @param input the input value to set.
     */
    @JsonCreator
    public EmbeddingsOptions(@JsonProperty(value = "input", required = true) InputModelBase input) {
        this.input = input;
    }

    /**
     * Get the user property: The ID of the end-user, for use in tracking and rate-limiting.
     *
     * @return the user value.
     */
    public String getUser() {
        return this.user;
    }

    /**
     * Set the user property: The ID of the end-user, for use in tracking and rate-limiting.
     *
     * @param user the user value to set.
     * @return the EmbeddingsOptions object itself.
     */
    public EmbeddingsOptions setUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * Get the inputType property: input type of embedding search to use.
     *
     * @return the inputType value.
     */
    public String getInputType() {
        return this.inputType;
    }

    /**
     * Set the inputType property: input type of embedding search to use.
     *
     * @param inputType the inputType value to set.
     * @return the EmbeddingsOptions object itself.
     */
    public EmbeddingsOptions setInputType(String inputType) {
        this.inputType = inputType;
        return this;
    }

    /**
     * Get the model property: ID of the model to use.
     *
     * @return the model value.
     */
    public String getModel() {
        return this.model;
    }

    /**
     * Set the model property: ID of the model to use.
     *
     * @param model the model value to set.
     * @return the EmbeddingsOptions object itself.
     */
    public EmbeddingsOptions setModel(String model) {
        this.model = model;
        return this;
    }

    /**
     * Get the input property: Input text to get embeddings for, encoded as a string. To get embeddings for multiple
     * inputs in a single request, pass an array of strings. Each input must not exceed 2048 tokens in length.
     *
     * <p>Unless you are embedding code, we suggest replacing newlines (\n) in your input with a single space, as we
     * have observed inferior results when newlines are present.
     *
     * @return the input value.
     */
    public InputModelBase getInput() {
        return this.input;
    }
}
